

class GFG {
    static void rotate(int []a,int d)
		{
		    int []k=new int [a.length];int i=0,temp=d;
		    while(d>0)
		    {
		        k[a.length-d]=a[i];i++;d--;
		    }
		    i=0;
		    while(temp<a.length)
		    {
		        k[i++]=a[temp++];
		    }
		    for(i=0;i<a.length;i++)
		        System.out.print(k[i]+" ");
		}
		
		static void reverse(int []a,int l,int r)
		{
		    int i=l,j=r-1;
		    while(i<j)
		    {
		        int temp=a[i];
		        a[i]=a[j];
		        a[j]=temp;
		        i++;j--;
		    }
		}
		static void rotate1(int []a,int d)
		{
		    reverse(a,0,d);
		    reverse(a,d,a.length);
		    reverse(a,0,a.length);
		    for(int i=0;i<a.length;i++)
		        System.out.print(a[i]+" ");
		}
		
	public static void main (String[] args) {
		//code
		Scanner st=new Scanner(System.in);
		int t=st.nextInt();
		while(t-->0)
		{
		    int n=st.nextInt();
		    int []a=new int[n];
		    for(int i=0;i<n;i++)
		        a[i]=st.nextInt();
		    int d=st.nextInt();      
		    rotate1(a,d);
		   System.out.println(); 
		}
	}
}
















import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 * ---
 * Hint: You can use the debug stream to print initialTX and initialTY, if Thor seems not follow your orders.
 **/
class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int lightX = in.nextInt(); // the X position of the light of power
        int lightY = in.nextInt(); // the Y position of the light of power
        int initialTx = in.nextInt(); // Thor's starting X position
        int initialTy = in.nextInt(); // Thor's starting Y position
        // game loop
        while (true) {
            int remainingTurns = in.nextInt(); // The remaining amount of turns Thor can move. Do not remove this line.
    
            // Write an action using System.out.println()
            // To debug: System.err.println("Debug messages...");
            int xdiff=initialTx - lightX, ydiff= initialTy - lightY;
            if(xdiff!=0 && ydiff==0)
            {
                while(lightX<initialTx)
                {
                    initialTx--;
                    System.out.println("N");
                }
                while(lightX>initialTx)
                {
                    initialTx++;
                    System.out.println("S");
                }
            }
            if(xdiff==0 && ydiff!=0)
            {
                while(lightY<initialTy)
                {
                    initialTy--;
                    System.out.println("W");
                }
                while(lightY>initialTy)
                {
                    initialTy++;
                    System.out.println("E");
                }
            }
            if(xdiff==0 && ydiff==0)
                break;
            if(xdiff<0 && ydiff<0)
            {
                   initialTx++; initialTy++;
                   System.out.println("SE");
            }
            if(xdiff<0 && ydiff>0)
            {
                initialTx++; initialTy--;
                   System.out.println("SW");
            }
            if(xdiff>0 && ydiff<0)
            {
                initialTx--; initialTy++;
                   System.out.println("NE");
            }
            if(xdiff>0 && ydiff>0)
            {
                initialTx--; initialTy--;
                   System.out.println("NW");
            }
            // A single line providing the move to be made: N NE E SE S SW W or NW
            //System.out.println("SE");
        }
    }
}


























