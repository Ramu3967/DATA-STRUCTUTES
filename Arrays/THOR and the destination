import java.util.*; //codingamer
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 * ---
 * Hint: You can use the debug stream to print initialTX and initialTY, if Thor seems not follow your orders.
 **/
class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int lightX = in.nextInt(); // the X position of the light of power
        int lightY = in.nextInt(); // the Y position of the light of power
        int initialTx = in.nextInt(); // Thor's starting X position
        int initialTy = in.nextInt(); // Thor's starting Y position
        // game loop
        while (true) {
            int remainingTurns = in.nextInt(); // The remaining amount of turns Thor can move. Do not remove this line.
    
            
            int xdiff=initialTx - lightX, ydiff= initialTy - lightY; //used these variables below to check if they are in the same line,
                    //if both of them are in the same line I would then move either horizontally or vertically to reach destination , else 
                    //I would create such situation
            
            if(initialTx<0)     //I had to include these lines because
                initialTx=0;    //for few inputs (in 4th test case to be specific)
            if(initialTy<0)     //initialTy and initialTx were negative
                initialTy=0;    //which according to the input constraints 
            if(lightX<0 )       //is wrong, just to make them zeroes i used these few lines of code
                lightX=0;
            if(lightY<0)
                lightY=0;       //till here
                
            if(xdiff!=0 && ydiff==0)    //my idea was to check if THOR and the destination are in the same line
            {                           //either horizontally or vertically(by comparing the co-ordinates)
                while(lightX<initialTx)
                {
                    initialTx--;
                    System.out.println("W");
                }
                while(lightX>initialTx)
                {
                    initialTx++;
                    System.out.println("E");
                }
            }
            if(xdiff==0 && ydiff!=0)
            {
                while(lightY<initialTy)
                {
                    initialTy--;
                    System.out.println("N");
                }
                while(lightY>initialTy)
                {
                    initialTy++;
                    System.out.println("S");
                }
            }
            if(xdiff==0 && ydiff==0)
                break;
            if(xdiff<0 && ydiff<0)          //else I would travel diagonally till Thor and the destination are in the same line
            {
                   initialTx++; initialTy++;
                   System.out.println("SE");
            }
            if(xdiff<0 && ydiff>0)
            {
                initialTx++; initialTy--;
                   System.out.println("NE");
            }
            if(xdiff>0 && ydiff<0)
            {
                initialTx--; initialTy++;
                   System.out.println("SW");
            }
            if(xdiff>0 && ydiff>0)
            {
                initialTx--; initialTy--;
                   System.out.println("NW");
            }
            // A single line providing the move to be made: N NE E SE S SW W or NW
            //System.out.println("SE");
        }
    }
}
